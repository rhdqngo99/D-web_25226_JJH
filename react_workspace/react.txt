react => js 라이브러리 
react 설치 프로그램 => node.js (설치 패키지 담고 있음.)
node.js => (설치 패키지 담고 있음.)    npm 
yarn (패키지 관리자) => 설치만 가지고 있는 라이브러리 

node -v  : node 버전 확인

react 패키지 설치 : npx create-react-app 패키지명(react-basic)

- npx create-react-app react-basic
- cd react-basic  : cd(디렉터리 이동)
- npm start  : 리액트 프로젝트 시작
- ctrl + c  : 서버 중지

----------------------------
src 폴더안에 컴포넌트를 생성하여 
App.js 에 추가하는 형태로 작성

- component 규칙
1. 함수형 컴포넌트(많이 사용), 
   클래스형 컴포넌트(거의 안씀)
2. 컴포넌트 이름은 반드시 첫글자 대문자 사용.
3. App.js  => jsx
4. class => className 으로 변경됨.
5. style => 반드시 객체 형태로 설정
6. 일반적으로 return은  <div></div> 로 리턴함.
7. 일반적으로 <div className="컴포넌트 이름"></div>

-------------------------------------------------------
username을 클릭하면, active 속성을 true / false로 변경
active가 true => color : green  / color : black

active 속성을 true / false로 변경 => onToggle
onToggle => username을 클릭하면 실행

username 의 color가 변경

-------------------------------------------------------
react에서 컴포넌트 간의 이동을 할 때 
router 를 사용

a 태그 대신 router => link를 사용
- router 라이브러리 설치 해야 사용가능
npm i react-router-dom
npm install react-router-dom

<BrowserRouter> 
라우터의 영향을 받는 영역 
  <Routes>
     실제 링크의 영향을 받는 영역
      <Route path="경로설정" element={실행 컴포넌트} />
      <Route path="/" element={<Home />} />
      <Route path="/comp1" element={<Comp1 />} />
  </Routes>
</BrowserRouter>

Header 영역의 링크를 설정할 키워드
<Link to="경로">키워드</Link>
Link to 의 경로는 <Route path="경로" /> 로 이동

-------------------------------------------------------
npx create-react-app react-api
cd react-api
npm start
-------------------------------------------------------

- users의 정보를 User.jsx  컴포넌트에 랜더링
- users 중 한명을 클릭하면, 다른 상세 정보를 하단에 출력

1. li  onClick을 걸고, UserOne.jsx 에게 props로 id 전달
2. 전달할 id 변수를 useState로 설정
3. id 값이 선택되면 랜더링

userOne.jsx
-------------------------------------------------------
npx create-react-app react-reducer
cd react-reducer
npm start

useReducer : useState와 비슷한 일을 함. 
변수의 상태를 관리하는 일을 함.
좀더 체계적으로 상태를 관리할 때 사용


function reducer(state , action) {
  // action에 따른 state 변경 로직
  // 변경된 state를 리턴
  return nextState;
} 

const [state, dispatch] = useReducer(reducer, initialState);
- state : 변수값 (컴포넌트에 사용할 수 있는 상태)
- dispatch : 액션을 발생시키는 함수
dispatch({ type : 'INCRE' })
- type : 'INCRE'  : action의 종류를 타입으로 선언
- action은 대문자로 쓰는 것이 규칙

--------------------------------------------
npx create-react-app react-board
cd react-board
npm start

게시판 (Board)
CRUD 
- Create (생성) 등록 => DB로 전송
- Read (읽기) 조회 => DB에서 조회
- Update (수정) 갱신 => DB의 내용 변경
- Delete (삭제) 삭제 => DB의 내용 삭제

1. 게시글 등록 페이지 (등록 => 리스트 페이지로 이동)
2. 게시글 리스트 페이지 (글 선택 => 해당 글의 상세 페이지로 이동)
3. 상세 페이지 (수정, 삭제, 리스트)
4. 수정 버튼을 클릭하면 => 수정 페이지로 이동
5. 수정페이지 (내용을 수정하고, 확인버튼 => 상세 페이지로 이동)
6. 삭제 버튼을 클릭하면 => 삭제 후 리스트 페이지로 이동

라우터를 이용하여 각 페이지 이동
npm i react-router-dom 설치

리액트 부트스트랩 install
npm install react-bootstrap bootstrap

------------------------------------------
DB 생성 => port 3306
DB명 : react_board (board)
user : reactUser / password : mysql

-------------------------------------------
npx create-react-app react-boarddb  
cd react-boarddb
npm start

라이브러리 설치
- 서버 : 		npm i express
- DB : 		npm i mysql
- 비동기 :	npm i axios
- cors :	npm i cors
- json : 	npm i json
- 자동감지 	npm i nodemon => 서버재시작
